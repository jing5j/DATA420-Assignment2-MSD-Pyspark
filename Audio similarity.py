# DATA420 Assignment 2
# Jing Wu 29696576


# start_pyspark_shell -e 4 -c 2 -w 4 -m 4

# Imports
# Q1
from pyspark import SparkContext
from pyspark.sql import SparkSession, functions as F
from pyspark.sql.types import *
from pyspark.mllib.stat import Statistics
import pandas as pd

# Q2
from pyspark.ml import Pipeline
from pyspark.ml.feature import StringIndexer, VectorAssembler,StandardScaler,PCA
from pyspark.ml.classification import LogisticRegression,RandomForestClassifier,GBTClassifier
from pyspark.ml.evaluation import BinaryClassificationEvaluator,MulticlassClassificationEvaluator
from pyspark.ml.tuning import ParamGridBuilder, CrossValidator


spark = SparkSession.builder.getOrCreate()
sc = SparkContext.getOrCreate()




###############################################################################
# Audio Similarity Q1
###############################################################################


# Load data from msd-jmir-mfcc-all-v1.0.csv
audio_data1 = (
    spark.read
    .format("com.databricks.spark.csv")
    .option("header", "false")
    .option("inferSchema", "false")
    .schema(msd_jmir_mfcc_all_schema)
    .load("hdfs:///data/msd/audio/features/msd-jmir-mfcc-all-v1.0.csv")
)
audio_data1.show(5,False)


#|MFCC_Overall_Standard_Deviation_1|MFCC_Overall_Standard_Deviation_2|MFCC_Overall_Standard_Deviation_3|MFCC_Overall_Standard_Deviation_4|MFCC_Overall_Standard_Deviation_5|MFCC_Overall_Standard_Deviation_6|MFCC_Overall_Standard_Deviation_7|MFCC_Overall_Standard_Deviation_8|MFCC_Overall_Standard_Deviation_9|MFCC_Overall_Standard_Deviation_10|MFCC_Overall_Standard_Deviation_11|MFCC_Overall_Standard_Deviation_12|MFCC_Overall_Standard_Deviation_13|MFCC_Overall_Average_1|MFCC_Overall_Average_2|MFCC_Overall_Average_3|MFCC_Overall_Average_4|MFCC_Overall_Average_5|MFCC_Overall_Average_6|MFCC_Overall_Average_7|MFCC_Overall_Average_8|MFCC_Overall_Average_9|MFCC_Overall_Average_10|MFCC_Overall_Average_11|MFCC_Overall_Average_12|MFCC_Overall_Average_13|MSD_TRACKID         |

#|59.28                            |4.15                             |5.105                            |2.275                            |2.185                            |1.95                             |1.603                            |1.335                            |1.3                              |1.396                             |1.395                             |1.267                             |1.171                             |-106.2                |5.644                 |0.3426                |1.814                 |1.033                 |-0.3445               |-0.4305               |0.1372                |0.0312                |-0.3132                |-0.0815                |0.7213                 |-0.405                 |'TRHFHQZ12903C9E2D5'|
#|46.35                            |6.888                            |4.652                            |4.131                            |3.225                            |2.826                            |2.108                            |1.922                            |1.95                             |1.697                             |1.661                             |1.622                             |1.295                             |-117.8                |5.945                 |1.041                 |8.891                 |-0.2149               |3.74                  |0.2908                |1.92                  |0.125                 |1.242                  |-0.5187                |0.2548                 |-0.4073                |'TRHFHYX12903CAF953'|
#|38.63                            |3.041                            |2.504                            |2.141                            |1.853                            |1.906                            |1.867                            |1.547                            |1.491                            |1.468                             |1.471                             |1.389                             |1.179                             |-77.41                |4.352                 |-0.118                |3.153                 |1.035                 |1.283                 |1.408                 |0.5908                |0.4882                |0.5522                 |-0.3168                |-0.5887                |0.03743                |'TRHFHAU128F9341A0E'|
#|33.49                            |5.009                            |4.56                             |3.153                            |2.383                            |2.4                              |2.113                            |1.985                            |2.075                            |1.827                             |1.716                             |1.774                             |1.448                             |-98.37                |4.949                 |-3.452                |1.62                  |-1.351                |2.264                 |-0.2145               |0.3408                |-0.604                |1.261                  |-1.527                 |0.02701                |-0.7334                |'TRHFHLP128F14947A7'|
#|37.43                            |4.107                            |3.167                            |2.793                            |2.158                            |1.926                            |1.814                            |1.598                            |1.622                            |1.547                             |1.532                             |1.31                              |1.239                             |-80.56                |5.324                 |-3.343                |7.034                 |-1.063                |1.167                 |0.0559                |1.682                 |-0.6607               |1.038                  |-0.1167                |0.462                  |-0.3687                |'TRHFHFF128F930AC11'|

#only showing top 5 rows
audio_data1.count() #  994623
 




# Descriptive Statistics
statistics = (
	audio_data1
	.drop('MSD_TRACKID')
	.describe()
	.toPandas()
	.set_index("summary")
	.transpose()
)
print(statistics)

#summary                              count                 mean               stddev      min     max
#MFCC_Overall_Standard_Deviation_1   994623   46.242498594945175   23.145602482988075      0.0   544.0
#MFCC_Overall_Standard_Deviation_2   994623    5.611131172112441    1.889936426496876      0.0   51.19
#MFCC_Overall_Standard_Deviation_3   994623    4.304985814350773   1.2052843850324944      0.0   24.48
#MFCC_Overall_Standard_Deviation_4   994623    3.226507721414047   0.7316868534116313      0.0   20.28
#MFCC_Overall_Standard_Deviation_5   994623    2.685735150266994   0.5861501761953776      0.0   21.02
#MFCC_Overall_Standard_Deviation_6   994623   2.4386808561489195     0.50160715471356      0.0   33.46
#MFCC_Overall_Standard_Deviation_7   994623   2.2412334862214225  0.42181309487313284      0.0   19.15
#MFCC_Overall_Standard_Deviation_8   994623   1.9406361865024098   0.3481757007129871      0.0   23.39
#MFCC_Overall_Standard_Deviation_9   994623   1.8686131949018876    0.331930112778366      0.0   23.08
#MFCC_Overall_Standard_Deviation_10  994623    1.825155394964726   0.3161322442104294      0.0   26.12
#MFCC_Overall_Standard_Deviation_11  994623   1.6955911254565832  0.31978956305968814      0.0   37.27
#MFCC_Overall_Standard_Deviation_12  994623   1.5781773833070414   0.2807041487616942      0.0   25.74
#MFCC_Overall_Standard_Deviation_13  994623    1.439864644249128  0.25329645461762473      0.0   19.38
#MFCC_Overall_Average_1              994623  -115.59257219066833    43.36804507302751  -1150.0  -50.81
#MFCC_Overall_Average_2              994623   11.392127466813102    6.760063128281962   -115.7    62.3
#MFCC_Overall_Average_3              994623  -0.5534998088467622    4.036609641037462   -37.68   58.51
#MFCC_Overall_Average_4              994623    4.066574771745199   2.4289482754121634   -33.08   36.08
#MFCC_Overall_Average_5              994623  -0.2978992831513065   1.7483692371223167   -19.74   49.66
#MFCC_Overall_Average_6              994623   0.9740160068880853   1.5423332699267618   -16.39   78.78
#MFCC_Overall_Average_7              994623  -0.7772938419444773   1.2125057142924198   -14.68   42.52
#MFCC_Overall_Average_8              994623    1.065497412938001    1.069868514512282   -15.24    55.6
#MFCC_Overall_Average_9              994623  -0.6177456971876134    0.959355776314872   -38.85   53.53
#MFCC_Overall_Average_10             994623   0.9894734842247073   0.7971012920853822   -7.523   54.79
#MFCC_Overall_Average_11             994623  -0.6663714301789341   0.7505053318672916   -11.13   85.05
#MFCC_Overall_Average_12             994623   0.2864940668087436   0.6325169315977884   -7.127   59.06
#MFCC_Overall_Average_13             994623  -0.5510901588250338   0.5658620831688016   -24.18   28.42



# Correlation 
data = audio_data1.drop('MSD_TRACKID')
col_names = data.columns
features = data.rdd.map(lambda row: row[0:])
corr_mat=Statistics.corr(features, method="pearson")
corr_df = pd.DataFrame(corr_mat)
corr_df.index, corr_df.columns = col_names, col_names
print(corr_df.to_string())
#                                    MFCC_Overall_Standard_Deviation_1  MFCC_Overall_Standard_Deviation_2  MFCC_Overall_Standard_Deviation_3  MFCC_Overall_Standard_Deviation_4  MFCC_Overall_Standard_Deviation_5  MFCC_Overall_Standard_Deviation_6  MFCC_Overall_Standard_Deviation_7  MFCC_Overall_Standard_Deviation_8  MFCC_Overall_Standard_Deviation_9  MFCC_Overall_Standard_Deviation_10  MFCC_Overall_Standard_Deviation_11  MFCC_Overall_Standard_Deviation_12  MFCC_Overall_Standard_Deviation_13  MFCC_Overall_Average_1  MFCC_Overall_Average_2  MFCC_Overall_Average_3  MFCC_Overall_Average_4  MFCC_Overall_Average_5  MFCC_Overall_Average_6  MFCC_Overall_Average_7  MFCC_Overall_Average_8  MFCC_Overall_Average_9  MFCC_Overall_Average_10  MFCC_Overall_Average_11  MFCC_Overall_Average_12  MFCC_Overall_Average_13
#MFCC_Overall_Standard_Deviation_1                            1.000000                           0.152774                           0.094457                           0.102792                           0.078922                           0.065795                           0.061382                           0.060105                           0.058803                            0.054020                            0.058570                            0.042405                            0.044042               -0.357635               -0.029123                0.028156               -0.068723                0.025586               -0.061967                0.025347               -0.074755                0.022614                -0.062191                 0.046663                -0.055798                 0.056740
#MFCC_Overall_Standard_Deviation_2                            0.152774                           1.000000                           0.663845                           0.591665                           0.543261                           0.485988                           0.425820                           0.444182                           0.403295                            0.367675                            0.341052                            0.306721                            0.297489               -0.163876                0.240749                0.212297               -0.049829                0.072777                0.041831               -0.030127               -0.054472               -0.053848                 0.003689                 0.023723                 0.002164                 0.070048
#MFCC_Overall_Standard_Deviation_3                            0.094457                           0.663845                           1.000000                           0.687869                           0.650056                           0.601455                           0.546656                           0.523766                           0.489167                            0.443988                            0.405782                            0.384538                            0.387353               -0.134364                0.214883                0.112498               -0.057578                0.056841               -0.025268               -0.015774               -0.054083               -0.072389                 0.017876                 0.017657                -0.027169                 0.053598
#MFCC_Overall_Standard_Deviation_4                            0.102792                           0.591665                           0.687869                           1.000000                           0.743213                           0.687839                           0.660753                           0.602177                           0.568065                            0.531171                            0.463120                            0.434838                            0.435652               -0.079187                0.135918                0.128591               -0.006177               -0.003432               -0.032747               -0.015827               -0.030228               -0.099872                 0.036078                 0.002758                -0.020271                 0.031474
#MFCC_Overall_Standard_Deviation_5                            0.078922                           0.543261                           0.650056                           0.743213                           1.000000                           0.717359                           0.753091                           0.679461                           0.654102                            0.618638                            0.566854                            0.522722                            0.524133               -0.074798                0.165108                0.060133               -0.037441               -0.047388               -0.043836               -0.087953               -0.018093               -0.138794                 0.062250                 0.066610                 0.001842                 0.054796
#MFCC_Overall_Standard_Deviation_6                            0.065795                           0.485988                           0.601455                           0.687839                           0.717359                           1.000000                           0.761711                           0.730270                           0.710297                            0.661330                            0.623901                            0.592034                            0.576128               -0.039458                0.134089                0.081603               -0.089859                0.006128               -0.118933                0.019481               -0.055671               -0.134091                 0.114624                -0.018192                 0.019403                 0.062186
#MFCC_Overall_Standard_Deviation_7                            0.061382                           0.425820                           0.546656                           0.660753                           0.753091                           0.761711                           1.000000                           0.773054                           0.756362                            0.728336                            0.670157                            0.636490                            0.623516               -0.019426                0.138857                0.037843               -0.099238               -0.075747               -0.102960               -0.055921               -0.036772               -0.141526                 0.096866                 0.020799                 0.031309                 0.063053
#MFCC_Overall_Standard_Deviation_8                            0.060105                           0.444182                           0.523766                           0.602177                           0.679461                           0.730270                           0.773054                           1.000000                           0.809384                            0.758117                            0.727556                            0.703726                            0.693565               -0.035784                0.190383                0.022312               -0.085269               -0.084326               -0.073917               -0.051927               -0.041715               -0.107472                 0.078272                -0.024443                 0.040883                 0.017729
#MFCC_Overall_Standard_Deviation_9                            0.058803                           0.403295                           0.489167                           0.568065                           0.654102                           0.710297                           0.756362                           0.809384                           1.000000                            0.821980                            0.772903                            0.757328                            0.731439               -0.037215                0.218252                0.005610               -0.110098               -0.113904               -0.140025               -0.087480               -0.059243               -0.187614                 0.110406                -0.018611                -0.001739                 0.013934
#MFCC_Overall_Standard_Deviation_10                           0.054020                           0.367675                           0.443988                           0.531171                           0.618638                           0.661330                           0.728336                           0.758117                           0.821980                            1.000000                            0.791296                            0.775532                            0.750107               -0.033290                0.244830                0.008889               -0.122044               -0.115452               -0.172060               -0.108809               -0.096573               -0.208643                 0.109093                -0.038285                 0.006096                 0.029883
#MFCC_Overall_Standard_Deviation_11                           0.058570                           0.341052                           0.405782                           0.463120                           0.566854                           0.623901                           0.670157                           0.727556                           0.772903                            0.791296                            1.000000                            0.837523                            0.764258               -0.048712                0.247189               -0.030105               -0.127619               -0.140716               -0.148230               -0.107239               -0.098168               -0.169655                 0.076412                 0.006694                 0.050832                 0.014677
#MFCC_Overall_Standard_Deviation_12                           0.042405                           0.306721                           0.384538                           0.434838                           0.522722                           0.592034                           0.636490                           0.703726                           0.757328                            0.775532                            0.837523                            1.000000                            0.826870               -0.037236                0.266949               -0.071006               -0.135832               -0.169888               -0.144234               -0.118559               -0.101065               -0.164298                 0.080557                -0.030157                 0.037363                -0.003459
#MFCC_Overall_Standard_Deviation_13                           0.044042                           0.297489                           0.387353                           0.435652                           0.524133                           0.576128                           0.623516                           0.693565                           0.731439                            0.750107                            0.764258                            0.826870                            1.000000               -0.054703                0.311881               -0.089583               -0.143143               -0.184950               -0.164551               -0.138412               -0.127687               -0.190273                 0.050799                -0.068179                 0.011663                -0.001736
#MFCC_Overall_Average_1                                      -0.357635                          -0.163876                          -0.134364                          -0.079187                          -0.074798                          -0.039458                          -0.019426                          -0.035784                          -0.037215                           -0.033290                           -0.048712                           -0.037236                           -0.054703                1.000000               -0.265759               -0.006028                0.091375                0.050130                0.099975                0.075930                0.151360                0.106450                 0.089927                 0.008433                 0.041701                -0.017161
#MFCC_Overall_Average_2                                      -0.029123                           0.240749                           0.214883                           0.135918                           0.165108                           0.134089                           0.138857                           0.190383                           0.218252                            0.244830                            0.247189                            0.266949                            0.311881               -0.265759                1.000000               -0.287912               -0.026161               -0.249423               -0.207542               -0.303274               -0.218272               -0.359948                -0.074168                -0.209126                -0.023714                -0.152680
#MFCC_Overall_Average_3                                       0.028156                           0.212297                           0.112498                           0.128591                           0.060133                           0.081603                           0.037843                           0.022312                           0.005610                            0.008889                           -0.030105                           -0.071006                           -0.089583               -0.006028               -0.287912                1.000000               -0.198742                0.413206                0.054347                0.248395               -0.083644                0.219303                -0.101631                 0.194101                -0.138119                 0.235366
#MFCC_Overall_Average_4                                      -0.068723                          -0.049829                          -0.057578                          -0.006177                          -0.037441                          -0.089859                          -0.099238                          -0.085269                          -0.110098                           -0.122044                           -0.127619                           -0.135832                           -0.143143                0.091375               -0.026161               -0.198742                1.000000               -0.058995                0.368857               -0.069997                0.312768               -0.055055                 0.137667                -0.141909                 0.237713                -0.254312
#MFCC_Overall_Average_5                                       0.025586                           0.072777                           0.056841                          -0.003432                          -0.047388                           0.006128                          -0.075747                          -0.084326                          -0.113904                           -0.115452                           -0.140716                           -0.169888                           -0.184950                0.050130               -0.249423                0.413206               -0.058995                1.000000                0.001543                0.438413                0.034216                0.337249                -0.127311                 0.248980                -0.148810                 0.267558
#MFCC_Overall_Average_6                                      -0.061967                           0.041831                          -0.025268                          -0.032747                          -0.043836                          -0.118933                          -0.102960                          -0.073917                          -0.140025                           -0.172060                           -0.148230                           -0.144234                           -0.164551                0.099975               -0.207542                0.054347                0.368857                0.001543                1.000000                0.016320                0.468559                0.103934                 0.243812                -0.031679                 0.311668                -0.146755
#MFCC_Overall_Average_7                                       0.025347                          -0.030127                          -0.015774                          -0.015827                          -0.087953                           0.019481                          -0.055921                          -0.051927                          -0.087480                           -0.108809                           -0.107239                           -0.118559                           -0.138412                0.075930               -0.303274                0.248395               -0.069997                0.438413                0.016320                1.000000               -0.043197                0.428314                -0.063576                 0.215511                -0.123587                 0.295794
#MFCC_Overall_Average_8                                      -0.074755                          -0.054472                          -0.054083                          -0.030228                          -0.018093                          -0.055671                          -0.036772                          -0.041715                          -0.059243                           -0.096573                           -0.098168                           -0.101065                           -0.127687                0.151360               -0.218272               -0.083644                0.312768                0.034216                0.468559               -0.043197                1.000000               -0.004442                 0.389986                 0.026725                 0.326990                -0.132851
#MFCC_Overall_Average_9                                       0.022614                          -0.053848                          -0.072389                          -0.099872                          -0.138794                          -0.134091                          -0.141526                          -0.107472                          -0.187614                           -0.208643                           -0.169655                           -0.164298                           -0.190273                0.106450               -0.359948                0.219303               -0.055055                0.337249                0.103934                0.428314               -0.004442                1.000000                -0.113694                 0.361245                -0.056247                 0.264406
#MFCC_Overall_Average_10                                     -0.062191                           0.003689                           0.017876                           0.036078                           0.062250                           0.114624                           0.096866                           0.078272                           0.110406                            0.109093                            0.076412                            0.080557                            0.050799                0.089927               -0.074168               -0.101631                0.137667               -0.127311                0.243812               -0.063576                0.389986               -0.113694                 1.000000                -0.103641                 0.360985                -0.129667
#MFCC_Overall_Average_11                                      0.046663                           0.023723                           0.017657                           0.002758                           0.066610                          -0.018192                           0.020799                          -0.024443                          -0.018611                           -0.038285                            0.006694                           -0.030157                           -0.068179                0.008433               -0.209126                0.194101               -0.141909                0.248980               -0.031679                0.215511                0.026725                0.361245                -0.103641                 1.000000                -0.115207                 0.333827
#MFCC_Overall_Average_12                                     -0.055798                           0.002164                          -0.027169                          -0.020271                           0.001842                           0.019403                           0.031309                           0.040883                          -0.001739                            0.006096                            0.050832                            0.037363                            0.011663                0.041701               -0.023714               -0.138119                0.237713               -0.148810                0.311668               -0.123587                0.326990               -0.056247                 0.360985                -0.115207                 1.000000                -0.238466
#MFCC_Overall_Average_13                                      0.056740                           0.070048                           0.053598                           0.031474                           0.054796                           0.062186                           0.063053                           0.017729                           0.013934                            0.029883                            0.014677                           -0.003459                           -0.001736               -0.017161               -0.152680                0.235366               -0.254312                0.267558               -0.146755                0.295794               -0.132851                0.264406                -0.129667                 0.333827                -0.238466                 1.000000



# Define schema
schema_MAGD = StructType([
    StructField('TRACK_ID', StringType()),
    StructField('GENRE_LABEL', StringType())
])    



# Load the MSD All Music Genre Dataset
MAGD = (
    spark.read
    .format("com.databricks.spark.csv")
    .option("header", "true")
    .option("inferSchema", "false")
    .schema(schema_MAGD)
    .option("delimiter", "\t")
    .load("hdfs:///data/msd/genre/msd-MAGD-genreAssignment.tsv")
)

MAGD.show(5,False)
#+------------------+--------------+
#|TRACK_ID          |GENRE_LABEL   |
#+------------------+--------------+
#|TRAAAAV128F421A322|Pop_Rock      |
#|TRAAAAW128F429D538|Rap           |
#|TRAAABD128F429CF47|Pop_Rock      |
#|TRAAACV128F423E09E|Pop_Rock      |
#|TRAAADT12903CCC339|Easy_Listening|
#+------------------+--------------+

MAGD.count() # 422713


MAGD = (
	MAGD
	.join(
		mismatches_not_accepted,
		on = "TRACK_ID",
		how = "left_anti"

	)
)

MAGD.count() # 415350

# Distribution of genres
genres_count = (
    MAGD
    .groupBy("GENRE_LABEL")
    .agg({"GENRE_LABEL":"count"})
    .select(
        F.col("GENRE_LABEL"),
        F.col("count(GENRE_LABEL)").alias("COUNT")
    )
    .orderBy('COUNT', ascending=False)
)
genres_count.show(5,False)

#+-----------+------+
#|GENRE_LABEL|COUNT |
#+-----------+------+
#|Pop_Rock   |234106|
#|Electronic |40431 |
#|Rap        |20606 |
#|Jazz       |17673 |
#|Latin      |17475 |
#+-----------+------+

genres_count.count() # 21


# Plot the distribution of genres
import matplotlib.pyplot as plt
import numpy as np
import scipy as sp
import pandas as pd
import os
import io




# Create figure
genres = genres_count.toPandas()

plt.figure(figsize=(18, 8), dpi=80)
plt.subplot(1, 1, 1)
N = len(genres)

index = np.arange(N)
width = 0.5

name_list = genres.GENRE_LABEL.tolist()
value_list = genres.COUNT.tolist()

plt.bar(index, value_list,width,label="genre count", color="#87CEFA")

plt.xlabel('Genre')
plt.ylabel('Genre (count)')
plt.title('Distribution of Genre')
plt.xticks(index, name_list,rotation=45)

plt.legend(loc="upper right")
plt.tight_layout()
plt.savefig("M:\\genres_dist.png") 
plt.close()



# Merge the genres dataset and the audio features dataset
######### audio_data trackid contains ''

audio_data2 = (
    audio_data1
    .withColumn("MSD_TRACKID",F.regexp_replace("MSD_TRACKID","'",""))
    .withColumnRenamed("MSD_TRACKID","TRACK_ID")
)

audio_data2.count()


audio_data = (
    audio_data2
    .join(
        MAGD,
        on = "TRACK_ID",
        how = "left"
    )
    .where(F.col("GENRE_LABEL").isNotNull())
    .dropDuplicates()
)
audio_data.show(5,False)


#|TRACK_ID          |MFCC_Overall_Standard_Deviation_1|MFCC_Overall_Standard_Deviation_2|MFCC_Overall_Standard_Deviation_3|MFCC_Overall_Standard_Deviation_4|MFCC_Overall_Standard_Deviation_5|MFCC_Overall_Standard_Deviation_6|MFCC_Overall_Standard_Deviation_7|MFCC_Overall_Standard_Deviation_8|MFCC_Overall_Standard_Deviation_9|MFCC_Overall_Standard_Deviation_10|MFCC_Overall_Standard_Deviation_11|MFCC_Overall_Standard_Deviation_12|MFCC_Overall_Standard_Deviation_13|MFCC_Overall_Average_1|MFCC_Overall_Average_2|MFCC_Overall_Average_3|MFCC_Overall_Average_4|MFCC_Overall_Average_5|MFCC_Overall_Average_6|MFCC_Overall_Average_7|MFCC_Overall_Average_8|MFCC_Overall_Average_9|MFCC_Overall_Average_10|MFCC_Overall_Average_11|MFCC_Overall_Average_12|MFCC_Overall_Average_13|GENRE_LABEL|

#|TRAAABD128F429CF47|57.59                            |4.997                            |3.014                            |3.032                            |2.673                            |2.116                            |2.191                            |1.633                            |1.662                            |1.813                             |1.74                              |1.518                             |1.414                             |-113.0                |9.427                 |0.2554                |1.946                 |0.0479                |0.7476                |-0.3535               |0.6082                |0.7024                |0.3992                 |0.1105                 |0.09948                |-0.2494                |Pop_Rock   |
#|TRAABPK128F424CFDB|43.24                            |3.492                            |2.767                            |4.017                            |2.699                            |1.956                            |2.038                            |1.703                            |1.548                            |1.617                             |1.422                             |1.318                             |1.204                             |-101.3                |-0.7101               |-2.155                |15.25                 |1.513                 |2.184                 |-0.8067               |3.7                   |-1.484                |1.435                  |-0.309                 |0.8958                 |-1.383                 |Pop_Rock   |
#|TRAACER128F4290F96|33.87                            |4.954                            |4.346                            |2.777                            |2.468                            |2.035                            |2.16                             |1.764                            |1.722                            |1.612                             |1.581                             |1.469                             |1.428                             |-95.42                |9.457                 |-2.505                |5.473                 |0.202                 |0.9379                |-0.9267               |2.328                 |-0.7072               |1.198                  |-1.079                 |0.7654                 |-0.9775                |Pop_Rock   |
#|TRAADYB128F92D7E73|51.9                             |5.343                            |3.649                            |3.083                            |2.131                            |2.498                            |2.174                            |2.073                            |1.949                            |1.864                             |1.571                             |1.694                             |1.365                             |-118.6                |19.9                  |1.069                 |2.842                 |-0.1827               |-0.4583               |-1.037                |1.665                 |-1.773                |0.7979                 |-0.7865                |-0.8961                |-0.4475                |Jazz       |
#|TRAAGHM128EF35CF8E|38.56                            |3.85                             |3.776                            |3.159                            |2.283                            |2.149                            |2.253                            |1.975                            |1.925                            |1.913                             |1.83                              |1.6                               |1.452                             |-103.7                |9.456                 |2.879                 |2.285                 |0.5683                |0.2974                |-0.7263               |1.06                  |-1.236                |1.575                  |-1.141                 |0.6522                 |-0.4993                |Electronic |


audio_data.count() # 413293







###############################################################################
# Audio Similarity Q2
###############################################################################



# (b)Convert GENRE_LABEL into "Electronic" and "Others"
binary_audio_data1 = (
    audio_data
    .withColumn('Convert_label', \
    	F.when(audio_data.GENRE_LABEL == 'Electronic', 1)
    	 .otherwise(0)
    )
)

binary_audio_data1.select(['TRACK_ID','GENRE_LABEL','Convert_label']).show(10)
#+------------------+-----------+-------------+
#|          TRACK_ID|GENRE_LABEL|Convert_label|
#+------------------+-----------+-------------+
#|TRAAABD128F429CF47|   Pop_Rock|            0|
#|TRAABPK128F424CFDB|   Pop_Rock|            0|
#|TRAACER128F4290F96|   Pop_Rock|            0|
#|TRAADYB128F92D7E73|       Jazz|            0|
#|TRAAGHM128EF35CF8E| Electronic|            1|
#|TRAAGRV128F93526C0|   Pop_Rock|            0|
#|TRAAGTO128F1497E3C|   Pop_Rock|            0|
#|TRAAHAU128F9313A3D|   Pop_Rock|            0|
#|TRAAHEG128E07861C3|        Rap|            0|
#|TRAAHZP12903CA25F4|        Rap|            0|
#+------------------+-----------+-------------+




# Class banlance
class_balance = (
    binary_audio_data1
    .groupBy("Convert_label")
    .count()
)
class_balance.show()
#+-------------+------+
#|Convert_label| count|
#+-------------+------+
#|            1| 40028|
#|            0|373265|
#+-------------+------+




# (c)Split Training & Test sets based on class balance
# Deal with Categorical Label
label_stringIdx = StringIndexer(inputCol = "Convert_label", outputCol = "label")
binary_audio_data = label_stringIdx.fit(binary_audio_data1).transform(binary_audio_data1)



# Split
fractions = {1 : 0.7, 0 : 0.7}

training = (
	binary_audio_data
	.stat
	.sampleBy("Convert_label", fractions, seed = 22)
)

training_balance = (
    training
    .groupBy("Convert_label")
    .count()
)

training_balance.show()

#+-------------+------+
#|Convert_label| count|
#+-------------+------+
#|            1| 27955|
#|            0|260932|
#+-------------+------+


test = (
    binary_audio_data
    .join(
      training,
      on = "TRACK_ID",
      how = "left_anti")
)


# Pre-processing

# Deal with Numeric columns


assemblerInputs= list(set(binary_audio_data.columns) - set(["TRACK_ID","GENRE_LABEL",'Convert_label']))
assembler = VectorAssembler(inputCols=assemblerInputs, outputCol="vectFeatures")
scaler = StandardScaler(inputCol="vectFeatures", outputCol="scaledFeatures",
                        withStd=True, withMean=False)
pca = PCA(k=5, inputCol="scaledFeatures", outputCol="features")


# Create the pipeline
pipeline = Pipeline(stages=[assembler,scaler,pca])

# Fit the pipeline to training audio_data
pipelineFit1 = pipeline.fit(training)
trainingData1 = pipelineFit1.transform(training)
trainingData1.select(['TRACK_ID','vectFeatures','scaledFeatures','features','label']).show(5)

#+------------------+--------------------+--------------------+--------------------+-----+
#|          TRACK_ID|        vectFeatures|      scaledFeatures|            features|label|
#+------------------+--------------------+--------------------+--------------------+-----+
#|TRAAABD128F429CF47|[-0.3535,1.518,-1...|[-0.3046951172907...|[16.8058181538216...|  0.0|
#|TRAABPK128F424CFDB|[-0.8067,1.318,-1...|[-0.6953254628528...|[15.1023750022572...|  0.0|
#|TRAACER128F4290F96|[-0.9267,1.469,-9...|[-0.7987580344932...|[16.5123647662044...|  0.0|
#|TRAADYB128F92D7E73|[-1.037,1.694,-11...|[-0.8938298065927...|[18.0907274095180...|  0.0|
#|TRAAGHM128EF35CF8E|[-0.7263,1.6,-103...|[-0.6260256398537...|[17.8558326312924...|  1.0|
#+------------------+--------------------+--------------------+--------------------+-----+

testData1 = pipelineFit1.transform(test)



# Unbalanced

# (d)Train the three algorithms
# Logistic Regression
lr = (
	LogisticRegression(
		maxIter=100, 
		regParam=0.0, 
		elasticNetParam=0.0, 
		threshold=0.5
	)
)
lrModel = lr.fit(trainingData1)

# Random Forest
rf = (
	RandomForestClassifier(
		numTrees=20,
		maxDepth=5, 
		maxBins=32
	)
)
rfModel = rf.fit(trainingData1)

# Gradient-boosted tree 
gbt = (
	GBTClassifier(
		maxDepth=5, 
		maxBins=32, 
		maxIter=20
	)
)
gbtModel = gbt.fit(trainingData1)


# (e)Performence

def binary_perf(model,dataset):
	predictions = model.transform(dataset)

	tp = predictions.where((predictions.label == 1.0) & (predictions.prediction == 1.0)).count()
	tn = predictions.where((predictions.label == 0.0) & (predictions.prediction == 0.0)).count()
	fp = predictions.where((predictions.label == 0.0) & (predictions.prediction == 1.0)).count()
	fn = predictions.where((predictions.label == 1.0) & (predictions.prediction == 0.0)).count()
	r = float(tp /(tp + fn))
	p = float(tp / (tp + fp))
	a = float((tp+tn) / (tp + tn + fp + fn))

	print("tp=",tp,"tn=",tn,"fp=",fp,"fn=",fn)
	print("recall:", r)
	print("precision:", p)
	print("accuracy:", a)



binary_perf(lrModel,testData1)
#tp= 5049 tn= 110645 fp= 1688 fn= 7024
#recall: 0.4182059140230266
#precision: 0.7494433724209589
#accuracy: 0.9299712232528977



binary_perf(rfModel,testData1)

#tp= 4980 tn= 110727 fp= 1606 fn= 7093
#recall: 0.4124906816864077
#precision: 0.7561494078348011
#accuracy: 0.9300757198205875



binary_perf(gbtModel,testData1)

#tp= 5986 tn= 110155 fp= 2178 fn= 6087
#recall: 0.4958171125652282
#precision: 0.733219010289074
#accuracy: 0.9335642975419192





# (f)Cross-validation
# Create ParamGrid for Cross Validation
lrGrid = (ParamGridBuilder()
          .addGrid(lr.regParam, [0.1, 0.5,0.8]) 
          .addGrid(lr.elasticNetParam, [0.0, 0.2,0.8]) 
          .addGrid(lr.maxIter, [50, 100, 120]) 
          .addGrid(lr.threshold,[0.1,0.5,0.9]) 
          .build()
)

rfGrid = (ParamGridBuilder()
          .addGrid(rf.numTrees, [5, 20, 30])
          .addGrid(rf.maxDepth, [3,5,8])
          .addGrid(rf.maxBins,[28,32,40])
          .build()
)

gbtGrid = (ParamGridBuilder()
          .addGrid(gbt.maxDepth,[1,5,10])
          .addGrid(gbt.maxBins,[24,32,40])
          .addGrid(gbt.maxIter,[10,20,30])
          .build()
)





def cv(model_type,grid,train,testing):
    # Create 5-fold CrossValidator
    cv = CrossValidator(estimator=model_type, \
                        estimatorParamMaps=grid, \
                        evaluator=BinaryClassificationEvaluator(), \
                        numFolds=5)
    cvModel = cv.fit(train)

    binary_perf(cvModel,testing)


cv(lr,lrGrid,trainingData1,testData1)
#tp= 10695 tn= 88332 fp= 24001 fn= 1378
#recall: 0.8858610121759297
#precision: 0.3082487894858197
#accuracy: 0.7959985852772374



cv(rf,rfGrid,trainingData1,testData1)
#tp= 5816 tn= 110439 fp= 1894 fn= 6257
#recall: 0.4817361053590657
#precision: 0.7543450064850843
#accuracy: 0.9344806520585823


cv(gbt,gbtGrid,trainingData1,testData1)
#tp= 6272 tn= 109736 fp= 2597 fn= 5801
#recall: 0.5195063364532427
#precision: 0.7071823204419889
#accuracy: 0.9324952172724789





# Oversample

# oversampling the dataset


# Seperate the Class 1 and Class 0
sample1_data = training.where(training.Convert_label == 1)
sample2_data = training.where(training.Convert_label == 0)


# Resample
sample1_data = sample1_data.rdd.takeSample(True,260000,22)
sample1_data = spark.createDataFrame(sample1_data)


# Create the oversampling dataset
oversampling_dataset = sample2_data.union(sample1_data)


# Check balance
oversampling_dataset_balance = (
    oversampling_dataset
    .groupBy("Convert_label")
    .count()
)

oversampling_dataset_balance.show()

#+-------------+------+
#|Convert_label| count|
#+-------------+------+
#|            1|260000|
#|            0|260932|
#+-------------+------+



# Fit the pipeline to training oversample data
pipelineFit2 = pipeline.fit(oversampling_dataset)
oversampling_dataset = pipelineFit2.transform(oversampling_dataset)
testData2 = pipelineFit2.transform(test)



# Fit the model
lrModel1 = lr.fit(oversampling_dataset)

rfModel1 = rf.fit(oversampling_dataset)

gbtModel1 = gbt.fit(oversampling_dataset)


# Oversample binary classification performance

binary_perf(lrModel1,testData2)
#tp= 8992 tn= 92271 fp= 20062 fn= 3081
#recall: 0.744802451751843
#precision: 0.3094926688235699
#accuracy: 0.8139719949198592


binary_perf(rfModel1,testData2)
#tp= 8959 tn= 93677 fp= 18656 fn= 3114
#recall: 0.7420690797647643
#precision: 0.3244251312692377
#accuracy: 0.8250084401073903


binary_perf(gbtModel1,testData2)
#tp= 9357 tn= 91871 fp= 20462 fn= 2716
#recall: 0.7750352025180154
#precision: 0.3137932190885006
#accuracy: 0.8136906580068486


# Cross Validation performance
cv(lr,lrGrid,oversampling_dataset,testData2)
#tp= 8737 tn= 94279 fp= 18054 fn= 3336
#recall: 0.7236809409425992
#precision: 0.3261169795826957
#accuracy: 0.8280629551629343


cv(rf,rfGrid,oversampling_dataset,testData2)
#tp= 9137 tn= 93991 fp= 18342 fn= 2936
#recall: 0.756812722604158
#precision: 0.3325084610065869
#accuracy: 0.8289632332845682


cv(gbt,gbtGrid,oversampling_dataset,testData2)
#tp= 8885 tn= 94685 fp= 17648 fn= 3188
#recall: 0.735939700157376
#precision: 0.3348660159047224
#accuracy: 0.8325161165860168




# Subsample

# Create the Subsampling dataset
subsample_dataset = (
	training
	.stat
	.sampleBy("Convert_label", {1 : 1, 0 : 0.11}, seed = 22)
)


# Fit the pipeline to training oversample data
pipelineFit3 = pipeline.fit(subsample_dataset)
subsample_dataset = pipelineFit3.transform(subsample_dataset)
testData3 = pipelineFit3.transform(test)



# Fit the model
lrModel2 = lr.fit(subsample_dataset)

rfModel2 = rf.fit(subsample_dataset)

gbtModel2 = gbt.fit(subsample_dataset)


# Subsample binary classification performance
binary_perf(lrModel2,testData3)

#tp= 8959 tn= 92348 fp= 19985 fn= 3114
#recall: 0.7420690797647643
#precision: 0.30952874516307355
#accuracy: 0.8143256756105011


binary_perf(rfModel2,testData3)

#tp= 8874 tn= 93749 fp= 18584 fn= 3199
#recall: 0.735028576161683
#precision: 0.32318449996358073
#accuracy: 0.8249039435397006


binary_perf(gbtModel2,testData3)
#tp= 9351 tn= 91233 fp= 21100 fn= 2722
#recall: 0.7745382257930921
#precision: 0.3070835112147384
#accuracy: 0.808514058807453



# Cross Validation performance
cv(lr,lrGrid,subsample_dataset,testData3)
#tp= 8667 tn= 94437 fp= 17896 fn= 3406
#recall: 0.7178828791518264
#precision: 0.32628091706509055
#accuracy: 0.8287703165442182


cv(rf,rfGrid,subsample_dataset,testData3)

#tp= 9224 tn= 93293 fp= 19040 fn= 2849
#recall: 0.764018885115547
#precision: 0.32635154259835836
#accuracy: 0.8240518946031542




cv(gbt,gbtGrid,subsample_dataset,testData3)

#tp= 9383 tn= 91188 fp= 21145 fn= 2690
#recall: 0.7771887683260167
#precision: 0.30735718029350106
#accuracy: 0.8084095622397633





###############################################################################
# Audio Similarity Q3
###############################################################################

# (b)Convert genre column into integer index

multi_label_stringIdx = StringIndexer(inputCol = "GENRE_LABEL", outputCol = "label")

audio_data = multi_label_stringIdx.fit(audio_data).transform(audio_data)




#################    Repeat Q2 (c) - (f)    ##################

# Pre-processing


# (c)Split Training & Test sets based on class balance

(training2, test2) = audio_data.randomSplit([0.7, 0.3], seed = 100)


balance = (
    training2
    .groupBy("Label")
    .count()
)

balance.show(21)

#+-----+------+
#|label| count|
#+-----+------+
#|  6.0|  9674|
#| 12.0|  4014|
#| 13.0|  2770|
#|  1.0| 28104|
#| 10.0|  4717|
#| 16.0|  1050|
#| 19.0|   308|
#|  5.0|  9917|
#|  7.0|  7917|
#|  4.0| 12257|
#| 17.0|   698|
#| 20.0|   146|
#|  9.0|  4825|
#|  8.0|  6199|
#| 14.0|  1441|
#|  0.0|163094|
#| 18.0|   395|
#|  3.0| 12349|
#| 11.0|  4269|
#|  2.0| 14470|
#| 15.0|  1137|
#+-----+------+




# Unbalanced


# Pre-processing

# Fit the pipeline to training audio_data
pipelineFit4 = pipeline.fit(training2)
trainingData4 = pipelineFit4.transform(training2)
testData4 = pipelineFit4.transform(test2)



# (d)Train
rfModel4 = rf.fit(trainingData4)


# (e)Performence

from pyspark.mllib.evaluation import MulticlassMetrics


def multi_perf(model,test):
    predictions = model.transform(test)

    predictionAndLabels = predictions.select(["prediction","label"])

    metrics = MulticlassMetrics(predictionAndLabels.rdd)

    print('accuracy:', metrics.accuracy)
    print('weightedPrecision:', metrics.weightedPrecision)
    print('weightedRecall:', metrics.weightedRecall)
    print('weightedFalsePositiveRate:', metrics.weightedFalsePositiveRate)

    for i in balance.select('label').rdd.map(lambda row : row[0]).collect():
    	print(f'Recall for class {i} is {metrics.recall(i)}, Precision for class {i} is {metrics.precision(i)}')


multi_perf(rfModel4,testData4)

#accuracy: 0.5730358906282883
#weightedPrecision: 0.39676768998602907
#weightedRecall: 0.5730358906282884
#weightedFalsePositiveRate: 0.5451335966916636
#Recall for class 13.0 is 0.0, Precision for class 13.0 is 0.0
#Recall for class 6.0 is 0.0, Precision for class 6.0 is 0.0
#Recall for class 12.0 is 0.0, Precision for class 12.0 is 0.0
#Recall for class 1.0 is 0.11682321368668232, Precision for class 1.0 is 0.5955536554082942
#Recall for class 10.0 is 0.0, Precision for class 10.0 is 0.0
#Recall for class 16.0 is 0.0, Precision for class 16.0 is 0.0
#Recall for class 19.0 is 0.0, Precision for class 19.0 is 0.0
#Recall for class 5.0 is 0.0, Precision for class 5.0 is 0.0
#Recall for class 7.0 is 0.0, Precision for class 7.0 is 0.0
#Recall for class 4.0 is 0.0, Precision for class 4.0 is 0.0
#Recall for class 17.0 is 0.0, Precision for class 17.0 is 0.0
#Recall for class 20.0 is 0.0, Precision for class 20.0 is 0.0
#Recall for class 9.0 is 0.0, Precision for class 9.0 is 0.0
#Recall for class 8.0 is 0.0, Precision for class 8.0 is 0.0
#Recall for class 14.0 is 0.0, Precision for class 14.0 is 0.0
#Recall for class 0.0 is 0.9915879828326181, Precision for class 0.0 is 0.5732575738778751
#Recall for class 18.0 is 0.0, Precision for class 18.0 is 0.0
#Recall for class 3.0 is 0.0, Precision for class 3.0 is 0.0
#Recall for class 2.0 is 0.0145997375328084, Precision for class 2.0 is 0.30272108843537415
#Recall for class 11.0 is 0.0, Precision for class 11.0 is 0.0
#Recall for class 15.0 is 0.0, Precision for class 15.0 is 0.0



# (f)Cross-validation
def multi_cv(model_type,grid,train,test):
    # Create 5-fold CrossValidator
    cv = CrossValidator(estimator=model_type, \
                        estimatorParamMaps=grid, \
                        evaluator=MulticlassClassificationEvaluator(), \
                        numFolds=5)
    cvModel = cv.fit(train)

    multi_perf(cvModel,test)


multi_cv(rf,rfGrid,trainingData4,testData4)
#accuracy: 0.5809198491201373
#weightedPrecision: 0.4172599479864947
#weightedRecall: 0.5809198491201373
#weightedFalsePositiveRate: 0.5000549670589144
#Recall for class 13.0 is 0.05281385281385281, Precision for class 13.0 is 0.23552123552123552
#Recall for class 6.0 is 0.0, Precision for class 6.0 is 0.0
#Recall for class 12.0 is 0.0, Precision for class 12.0 is 0.0
#Recall for class 1.0 is 0.1646259644414626, Precision for class 1.0 is 0.5868460388639761
#Recall for class 10.0 is 0.0, Precision for class 10.0 is 0.0
#Recall for class 19.0 is 0.0, Precision for class 19.0 is 0.0
#Recall for class 16.0 is 0.0, Precision for class 16.0 is 0.0
#Recall for class 5.0 is 0.0, Precision for class 5.0 is 0.0
#Recall for class 7.0 is 0.0, Precision for class 7.0 is 0.0
#Recall for class 4.0 is 0.0, Precision for class 4.0 is 0.0
#Recall for class 20.0 is 0.0, Precision for class 20.0 is 0.0
#Recall for class 17.0 is 0.0, Precision for class 17.0 is 0.0
#Recall for class 8.0 is 0.0, Precision for class 8.0 is 0.0
#Recall for class 9.0 is 0.0, Precision for class 9.0 is 0.0
#Recall for class 14.0 is 0.0, Precision for class 14.0 is 0.0
#Recall for class 0.0 is 0.9713447782546495, Precision for class 0.0 is 0.5900392797552837
#Recall for class 18.0 is 0.0, Precision for class 18.0 is 0.0
#Recall for class 3.0 is 0.0, Precision for class 3.0 is 0.0
#Recall for class 2.0 is 0.2988845144356955, Precision for class 2.0 is 0.37926727726894255
#Recall for class 11.0 is 0.013927576601671309, Precision for class 11.0 is 0.4032258064516129
#Recall for class 15.0 is 0.0, Precision for class 15.0 is 0.0







# Balanced


# Resample

label_count_dict = balance.rdd.collectAsMap()

data0 = training2.where(training2.label == 0.0).rdd.takeSample(True,1000,22)
balanced_data = spark.createDataFrame(data0)

del label_count_dict[0.0]

for i,j in label_count_dict.items():
	data = training2.where(training2.label == i).rdd.takeSample(True,1000,22)
	sample = spark.createDataFrame(data)
	balanced_data = balanced_data.union(sample)



# Fit the pipeline to training audio_data
pipelineFit5 = pipeline.fit(balanced_data)
trainingData5 = pipelineFit5.transform(balanced_data)
testData5 = pipelineFit5.transform(test2)


# (d)Train
rfModel5 = rf.fit(trainingData5)


# (e)Performence

multi_perf(rfModel5,testData5)
#accuracy: 0.34815690210616634
#weightedPrecision: 0.5506862084282413
#weightedRecall: 0.3481569021061663
#weightedFalsePositiveRate: 0.07693993972222436
#Recall for class 12.0 is 0.1938352104327208, Precision for class 12.0 is 0.05323998697492673
#Recall for class 6.0 is 0.20885167464114832, Precision for class 6.0 is 0.14087461675004034
#Recall for class 13.0 is 0.02857142857142857, Precision for class 13.0 is 0.12406015037593984
#Recall for class 1.0 is 0.3383931566588393, Precision for class 1.0 is 0.25475093124565945
#Recall for class 10.0 is 0.0029644268774703555, Precision for class 10.0 is 0.024896265560165973
#Recall for class 16.0 is 0.160676532769556, Precision for class 16.0 is 0.02740714028128381
#Recall for class 19.0 is 0.006711409395973154, Precision for class 19.0 is 0.003676470588235294
#Recall for class 5.0 is 0.0, Precision for class 5.0 is 0.0
#Recall for class 7.0 is 0.21551230681167716, Precision for class 7.0 is 0.10203252032520325
#Recall for class 4.0 is 0.16738113795791115, Precision for class 4.0 is 0.10355635925256178
#Recall for class 17.0 is 0.20333333333333334, Precision for class 17.0 is 0.025416666666666667
#Recall for class 20.0 is 0.25, Precision for class 20.0 is 0.00391566265060241
#Recall for class 9.0 is 0.19511002444987774, Precision for class 9.0 is 0.0741635687732342
#Recall for class 8.0 is 0.042443474811582706, Precision for class 8.0 is 0.08081570996978851
#Recall for class 14.0 is 0.6508196721311476, Precision for class 14.0 is 0.051929365598430345
#Recall for class 0.0 is 0.44565092989985694, Precision for class 0.0 is 0.8574220362775591
#Recall for class 18.0 is 0.3356164383561644, Precision for class 18.0 is 0.02472250252270434
#Recall for class 3.0 is 0.10203306099182975, Precision for class 3.0 is 0.1633211678832117
#Recall for class 11.0 is 0.0701949860724234, Precision for class 11.0 is 0.14516129032258066
#Recall for class 2.0 is 0.5042650918635171, Precision for class 2.0 is 0.286593324631736
#Recall for class 15.0 is 0.28969957081545067, Precision for class 15.0 is 0.04698920988513749


# (f)Cross-validation
multi_cv(rf,rfGrid,trainingData5,testData5)
#accuracy: 0.3458742775736187
#weightedPrecision: 0.5692280510690703
#weightedRecall: 0.3458742775736186
#weightedFalsePositiveRate: 0.06647974357655681
#Recall for class 6.0 is 0.16339712918660287, Precision for class 6.0 is 0.13967280163599183
#Recall for class 12.0 is 0.17131001778304683, Precision for class 12.0 is 0.05404899943893772
#Recall for class 13.0 is 0.11255411255411256, Precision for class 13.0 is 0.09393063583815028
#Recall for class 1.0 is 0.3508889634350889, Precision for class 1.0 is 0.300747556066705
#Recall for class 10.0 is 0.06818181818181818, Precision for class 10.0 is 0.0525314046440807
#Recall for class 19.0 is 0.11409395973154363, Precision for class 19.0 is 0.012611275964391691
#Recall for class 16.0 is 0.2346723044397463, Precision for class 16.0 is 0.04420549581839905
#Recall for class 5.0 is 0.0070217917675544795, Precision for class 5.0 is 0.08504398826979472
#Recall for class 7.0 is 0.2630223239839725, Precision for class 7.0 is 0.11964587944278089
#Recall for class 4.0 is 0.19095869056897896, Precision for class 4.0 is 0.10944829126647308
#Recall for class 17.0 is 0.24, Precision for class 17.0 is 0.025236593059936908
#Recall for class 20.0 is 0.3076923076923077, Precision for class 20.0 is 0.0061633281972265025
#Recall for class 8.0 is 0.09440698135660452, Precision for class 8.0 is 0.07880794701986756
#Recall for class 9.0 is 0.3740831295843521, Precision for class 9.0 is 0.09985641561153896
#Recall for class 14.0 is 0.6196721311475409, Precision for class 14.0 is 0.07408859270874167
#Recall for class 0.0 is 0.4265236051502146, Precision for class 0.0 is 0.874336490806182
#Recall for class 18.0 is 0.3150684931506849, Precision for class 18.0 is 0.033261026753434564
#Recall for class 3.0 is 0.13053391601748052, Precision for class 3.0 is 0.16686907942676707
#Recall for class 11.0 is 0.13147632311977717, Precision for class 11.0 is 0.14047619047619048
#Recall for class 2.0 is 0.46981627296587924, Precision for class 2.0 is 0.28818675789897363
#Recall for class 15.0 is 0.2875536480686695, Precision for class 15.0 is 0.06387035271687322

